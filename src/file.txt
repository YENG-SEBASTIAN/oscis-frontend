import { create } from 'zustand';
import { devtools } from 'zustand/middleware';
import ApiService from '@/lib/apiService';
import { ImageInterface } from '@/types/types';

export interface Category {
  id: string;
  name: string;
  slug: string;
  description: string;
  image: ImageInterface;
  alt_text: string;
  display_order: number;
  is_active: boolean;
  featured: boolean;
  created_at: string;
  updated_at: string;
}

interface CategoryAPIResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Category[];
}

interface CategoryStore {
  categories: Category[];
  isLoading: boolean;
  error: string | null;
  count: number;
  next: string | null;
  previous: string | null;

  fetchCategories: (params?: Record<string, any>) => Promise<void>;
  createCategory: (data: Partial<Category>) => Promise<void>;
  updateCategory: (id: string, data: Partial<Category>) => Promise<void>;
  deleteCategory: (id: string) => Promise<void>;
}

export const useCategoryStore = create<CategoryStore>()(
  devtools((set, get) => ({
    categories: [],
    isLoading: false,
    error: null,
    count: 0,
    next: null,
    previous: null,

    fetchCategories: async (params = {}) => {
      set({ isLoading: true, error: null });
      try {
        const response = await ApiService.get<CategoryAPIResponse>('/categories/', { params });

        set({
          categories: response.results ?? [],
          count: response.count ?? 0,
          next: response.next,
          previous: response.previous,
          isLoading: false,
        });
      } catch (error: any) {
        console.error('Error fetching categories:', error);
        set({
          error: error?.response?.data?.detail || 'Failed to load categories',
          isLoading: false,
        });
      }
    },

    createCategory: async (data) => {
      set({ isLoading: true, error: null });
      try {
        await ApiService.post('/categories/', data);
        await get().fetchCategories();
      } catch (error: any) {
        console.error('Error creating category:', error);
        set({
          error: error?.response?.data?.detail || 'Failed to create category',
        });
      } finally {
        set({ isLoading: false });
      }
    },

    updateCategory: async (id, data) => {
      set({ isLoading: true, error: null });
      try {
        await ApiService.patch(`/categories/${id}/`, data);
        await get().fetchCategories();
      } catch (error: any) {
        console.error('Error updating category:', error);
        set({
          error: error?.response?.data?.detail || 'Failed to update category',
        });
      } finally {
        set({ isLoading: false });
      }
    },

    deleteCategory: async (id) => {
      set({ isLoading: true, error: null });
      try {
        await ApiService.delete(`/categories/${id}/`);
        await get().fetchCategories();
      } catch (error: any) {
        console.error('Error deleting category:', error);
        set({
          error: error?.response?.data?.detail || 'Failed to delete category',
        });
      } finally {
        set({ isLoading: false });
      }
    },
  }))
);









import { create } from 'zustand';
import { devtools } from 'zustand/middleware';
import { produce } from 'immer';
import ApiService from '@/lib/apiService';
import type { ProductInterface } from '@/types/types';

interface PaginatedResponse<T> {
  count: number;
  next: string | null;
  previous: string | null;
  results: T[];
}

type FetchParams = Record<string, any>;

interface ProductStore {
  products: ProductInterface[];
  selectedProduct: ProductInterface | null;
  count: number;
  next: string | null;
  previous: string | null;

  isLoading: boolean;
  isCreating: boolean;
  isUpdating: boolean;
  isDeleting: boolean;
  error: string | null;

  fetchProducts: (params?: FetchParams, append?: boolean) => Promise<void>;
  fetchProductById: (id: string) => Promise<void>;
  createProduct: (data: FormData) => Promise<void>;
  updateProduct: (id: string, data: FormData) => Promise<void>;
  deleteProduct: (id: string) => Promise<void>;

  clearError: () => void;
  clearSelectedProduct: () => void;
}

export const useProductStore = create<ProductStore>()(
  devtools((set, get) => {
    let lastFetchId = 0; // prevents race conditions when multiple fetches overlap

    return {
      products: [],
      selectedProduct: null,
      count: 0,
      next: null,
      previous: null,

      isLoading: false,
      isCreating: false,
      isUpdating: false,
      isDeleting: false,
      error: null,

      clearError: () => set({ error: null }),
      clearSelectedProduct: () => set({ selectedProduct: null }),

      fetchProducts: async (params = {}, append = false) => {
        const currentFetch = ++lastFetchId;
        set({ isLoading: true, error: null });

        try {
          const response = await ApiService.get<PaginatedResponse<ProductInterface>>(
            '/products/',
            { params }
          );

          if (currentFetch !== lastFetchId) return; // ignore stale fetch

          set(
            produce((state: ProductStore) => {
              const newResults = response.results ?? [];
              if (append) {
                state.products.push(...newResults);
              } else {
                state.products = newResults;
              }
              state.count = response.count ?? 0;
              state.next = response.next ?? null;
              state.previous = response.previous ?? null;
              state.isLoading = false;
            })
          );
        } catch (error: any) {
          console.error('Error fetching products:', error);
          set({
            error: error?.response?.data?.detail || 'Failed to load products',
            isLoading: false,
          });
        }
      },

      fetchProductById: async (id) => {
        set({ isLoading: true, error: null });
        try {
          const product = await ApiService.get<ProductInterface>(`/products/${id}/`);
          set({ selectedProduct: product, isLoading: false });
        } catch (error: any) {
          console.error('Error fetching product by ID:', error);
          set({
            error: error?.response?.data?.detail || 'Failed to fetch product',
            isLoading: false,
          });
        }
      },

      createProduct: async (data) => {
        set({ isCreating: true, error: null });
        try {
          const newProduct = await ApiService.post<ProductInterface>('/products/', data, true);
          set(
            produce((state: ProductStore) => {
              state.products.unshift(newProduct);
              state.count += 1;
              state.isCreating = false;
            })
          );
        } catch (error: any) {
          console.error('Error creating product:', error);
          set({
            error: error?.response?.data?.detail || 'Failed to create product',
            isCreating: false,
          });
          throw error;
        }
      },

      updateProduct: async (id, data) => {
        set({ isUpdating: true, error: null });
        try {
          const updatedProduct = await ApiService.put<ProductInterface>(`/products/${id}/`, data, true);
          set(
            produce((state: ProductStore) => {
              const idx = state.products.findIndex((p) => String(p.id) === String(id));
              if (idx !== -1) state.products[idx] = updatedProduct;
              if (state.selectedProduct && String(state.selectedProduct.id) === String(id)) {
                state.selectedProduct = updatedProduct;
              }
              state.isUpdating = false;
            })
          );
        } catch (error: any) {
          console.error('Error updating product:', error);
          set({
            error: error?.response?.data?.detail || 'Failed to update product',
            isUpdating: false,
          });
          throw error;
        }
      },

      deleteProduct: async (id) => {
        set({ isDeleting: true, error: null });
        try {
          await ApiService.delete(`/products/${id}/`);
          set(
            produce((state: ProductStore) => {
              state.products = state.products.filter((p) => String(p.id) !== String(id));
              state.count = Math.max(0, state.count - 1);
              state.isDeleting = false;
            })
          );
        } catch (error: any) {
          console.error('Error deleting product:', error);
          set({
            error: error?.response?.data?.detail || 'Failed to delete product',
            isDeleting: false,
          });
          throw error;
        }
      },
    };
  })
);
